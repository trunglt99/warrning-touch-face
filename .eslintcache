[{"/home/trung/workspace/reactjs/bo-tay-ra/src/index.js":"1","/home/trung/workspace/reactjs/bo-tay-ra/src/App.js":"2","/home/trung/workspace/reactjs/bo-tay-ra/src/reportWebVitals.js":"3"},{"size":500,"mtime":1610944352225,"results":"4","hashOfConfig":"5"},{"size":3471,"mtime":1610964253381,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1610944352229,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"167j4yn",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/home/trung/workspace/reactjs/bo-tay-ra/src/index.js",[],["16","17"],"/home/trung/workspace/reactjs/bo-tay-ra/src/App.js",["18","19"],"import React, {useEffect, useRef,useState} from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as kmmClassifier from '@tensorflow-models/knn-classifier';\nimport * as tf from '@tensorflow/tfjs';\nimport {Howl} from 'howler';\nimport soundURL from './assets/hey_sondn.mp3';\nimport { initNotifications, notify} from '@mycv/f8-notification';\n\nvar sound = new Howl({\n  src: [soundURL]\n});\nconst NOT_TOUCH_LABEL= 'not_Touch';\nconst TOUCHED_LABEL = 'touched';\nconst TRAINING_TIMES = 50;\nconst TOUCHED_CONFIDENCE = 0.8;\nfunction App() {\n  const video = useRef();\n  const classifier = useRef();\n  const canPlaySond = useRef(true);\n  const mobilenetModule = useRef(); \n  const [touch, setTouched] = useState(false);\n  const init = async() =>{\n    console.log('init...');\n    await setupCamera();\n    console.log('setup camera success');\n    classifier.current = kmmClassifier.create();\n    mobilenetModule.current = await mobilenet.load();\n    console.log('setup done');\n    console.log('no touch face button train 1');\n    initNotifications({colldown: 3000 });\n  }\n\n  const setupCamera = () => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia || \n      navigator.webkitGetUserMedia || \n      navigator.mozGetUserMedia || \n      navigator.msGetUserMedia;\n\n      if(navigator.getUserMedia) {\n        navigator.getUserMedia(\n          {video: true},\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata',resolve)\n          },\n          error => reject(error)\n        );\n           } else {\n        reject();\n      } \n    });\n  }\n  const train = async label => {\n    console.log(`[${label}] Dang train`);\n    for (let i=0; i<TRAINING_TIMES; ++i) {\n     console.log(`progress ${parseInt(i+1) / TRAINING_TIMES * 100}%`);\n    await training(label);\n    }\n  }\n\n  const training = label => {\n    return new Promise(async  resolve => {\n      const embedding = mobilenetModule.current.infer(\n     video.current,\n     true\n      );\n      classifier.current.addExample(embedding, label);\n      await sleep(100);\n      resolve();\n    });\n  }\n  const run = async() => {\n    const embedding = mobilenetModule.current.infer(\n      video.current,\n      true\n    );\n    const result = await classifier.current.predictClass(embedding);\n   if (\n     result.label === TOUCHED_LABEL &&\n     result.confidences[result.label] > TOUCHED_CONFIDENCE\n   ) {\n     console.log('Touched');\n     canPlaySond.current = false;\n     sound.play();\n     notify('Bo tay ra!', { body:'Ban vau cham tay vao mat'})\n     setTouched(true);\n   }else\n   {\n     console.log('not touched');\n     setTouched(false);\n   }\n    await sleep(200);\n    run();\n  }\n  const sleep = (ms = 0) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n  useEffect(() => {\n    \n      init();\n      sound.on('end', function(){\n        canPlaySond.current = true;\n      })\n      return () => {\n    }\n\n  },[]);\n  return (\n    <div className={`main ${touch ? 'touched' : ' '}`}>\n   <h1>HELLO REACTJS</h1>\n   <video\n   ref={video}\n   className=\"video\"\n   autoPlay\n   />\n   <div className=\"control\">\n<button className=\"btn\" onClick={()=> train(NOT_TOUCH_LABEL)}>Train 1</button>\n<button className=\"btn\" onClick={()=> train(TOUCHED_LABEL)}>Train 2</button>\n<button className=\"btn\" onClick={()=> run()}>Run</button>\n   </div>\n\n    </div>  \n  );\n}\n\nexport default App;\n","/home/trung/workspace/reactjs/bo-tay-ra/src/reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":5,"column":13,"nodeType":"26","messageId":"27","endLine":5,"endColumn":15},{"ruleId":"28","severity":1,"message":"29","line":109,"column":5,"nodeType":"30","endLine":109,"endColumn":7,"suggestions":"31"},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["34"],"no-global-assign","no-unsafe-negation",{"desc":"35","fix":"36"},"Update the dependencies array to be: [init]",{"range":"37","text":"38"},[3014,3016],"[init]"]